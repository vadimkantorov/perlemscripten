name: buildperlwasm

on: workflow_dispatch
env:
  URLPERL: https://www.cpan.org/src/5.0/perl-5.40.0.tar.gz
  EMSCRIPTEN_VERSION: 3.1.73

jobs:

  buildperlwasm:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v13
        with:
          version: ${{env.EMSCRIPTEN_VERSION}}

      - name: Install Perl static native
        shell: bash
        run: |
          mkdir native && curl -L $URLPERL | tar -xzf - --strip-components=1 --directory=native
          cd native && BUILD_ZLIB=0 sh +x ./Configure -sde -Dman1dir=none -Dman3dir=none -Dprefix="$PWD/prefix" -Dusedevel -Uversiononly -Dlibs="-lpthread -ldl -lm -lutil -lc -lz" -Dstatic_ext="mro Devel/Peek File/DosGlob File/Glob Sys/Syslog Sys/Hostname PerlIO/via PerlIO/mmap PerlIO/encoding B attributes Unicode/Normalize Unicode/Collate threads threads/shared IPC/SysV re Digest/MD5 Digest/SHA SDBM_File Math/BigInt/FastCalc Data/Dumper I18N/Langinfo Time/HiRes Time/Piece IO Socket Hash/Util/FieldHash Hash/Util Filter/Util/Call POSIX Encode/Unicode Encode Encode/JP Encode/KR Encode/EBCDIC Encode/CN Encode/Symbol Encode/Byte Encode/TW Compress/Raw/Zlib Compress/Raw/Bzip2 MIME/Base64 Cwd Storable List/Util Fcntl Opcode" && cd -
          make -C native
          make -C native install
          
      - name: Heredoc
        run: |
          cat <<'EOF' > hintfile_wasm.sh
            #TODO: almost all of the known_extensions are still being built. we should probably exclude some of them! (see also nonxs_ext)
            #noextensions='IPC/SysV'
            # Here's a fun one: apparently, when building perlmini.c, emcc notices that it's a symlink to perl.c, and compiles to perl.o
            # (because there is no -o option), so the final perl ends up thinking it's miniperl (shown in "perl -v", @INC doesn't work, etc.).
            # Because of this and other issues I've had with symlinks, I'm switching to hard links instead.
            # (Another possible fix might be to fix the Makefile steps so that they use the -o option, but this solution works for now.)
            #TODO Later: In NODEFS, does Perl's -e test work correctly on symlinks? (./t/TEST was having issues detecting ./t/perl, a symlink to ./perl).

            usemymalloc="n"
            uselargefiles="n"
            usenm='undef'

            usemallocwrap="define"
            d_procselfexe='undef'
            d_dlopen='undef'
            
            d_setrgid='undef'
            d_setruid='undef'
            d_setproctitle='undef'
            d_malloc_size='undef'
            d_malloc_good_size='undef'
            d_fdclose='undef'

            #d_prctl='define' # hm, it's present in the libc source, but Configure shows Emscripten error output? -> for now, assume it's not available

            # It *looks* like shm*, sem* and a few others exist in Emscripten's libc,
            # but I'm not sure why Configure isn't detecting them. But at the moment I'm not going
            # to worry about them, and just not build IPC-SysV.
            d_clearenv='undef'
            d_cuserid='undef'
            d_eaccess='undef'
            d_getspnam='undef'
            d_msgctl='undef'
            d_msgget='undef'
            d_msgrcv='undef'
            d_msgsnd='undef'
            d_semget='undef'
            d_semop='undef'
            d_shmat='undef'
            d_shmctl='undef'
            d_shmdt='undef'
            d_shmget='undef'
            d_syscall='undef'


            # Emscripten does not have signals support (documentation isn't 100% clear on this? but see "$EMSCRIPTEN/system/include/libc/setjmp.h")
            # but if you do: grep -r 'Calling stub instead of' "$EMSCRIPTEN"
            # you'll see the unsupported stuff (as of 1.37.35):
            # signal() sigaction() sigprocmask() __libc_current_sigrtmin __libc_current_sigrtmax kill() killpg() siginterrupt() raise() pause()
            # plus: "Calling longjmp() instead of siglongjmp()"
            #d_sigaction='undef'
            #d_sigprocmask='undef'
            d_killpg='undef'
            d_pause='undef'
            d_sigsetjmp='undef' # this also disables Perl's use of siglongjmp() (see config.h)
            # the others either aren't used by Perl (like siginterrupt) or can't be Configure'd (like kill)
            #TODO Later: currently I've disabled Perl's use of signal() by patching the source - maybe there's a better way?

            # Emscripten doesn't actually have these either (see "$EMSCRIPTEN/src/library.js")
            d_wait4='undef'
            d_waitpid='undef'
            d_vfork='undef'
            d_pseudofork='undef'

            i_pthread='undef'
            d_pthread_atfork='undef'
            d_pthread_attr_setscope='undef'
            d_pthread_yield='undef'

            #TODO Later: The test for "selectminbits" seems to fail,
            # the error appears to be coming from this line (because apparently stream.stream_ops is undefined):
            # https://github.com/kripken/emscripten/blob/ddfc3e32f65/src/library_syscall.js#L750
            # For now, just use this number from a build with an earlier version where this didn't fail:
            #selectminbits='32'
            #alignbytes='4'


            ldflags="$ldflags -lm -O2 -s NO_EXIT_RUNTIME=1 -s ALLOW_MEMORY_GROWTH=1 -Wno-almost-asm -s ERROR_ON_UNDEFINED_SYMBOLS=0 -s WASM=1"

            # the following is needed for the "musl" libc provided by emscripten to provide all functions
            # from Makefile.emcc / Makefile.micro  -DSTANDARD_C -DPERL_USE_SAFE_PUTENV
            # disable this warning, I don't think we need it - TODO: how to append this after -Wall?
            ccflags="$ccflags -D_GNU_SOURCE -D_POSIX_C_SOURCE  -DNO_MATHOMS -Wno-null-pointer-arithmetic"

            # Configure apparently changes "-s ASSERTIONS=2 -s STACK_OVERFLOW_CHECK=2" to "-s -s" when converting ccflags to cppflags
            # this is the current hack/workaround: copy cppflags from config.sh and fix it (TODO Later: better way would be to patch Configure)
            cppflags='-lm -s ERROR_ON_UNDEFINED_SYMBOLS=0 -D_GNU_SOURCE -D_POSIX_C_SOURCE -DSTANDARD_C -DPERL_USE_SAFE_PUTENV -DNO_MATHOMS -Wno-null-pointer-arithmetic -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include'
          
          EOF

      - name: Install Perl static wasm
        shell: bash
        run: |
          mkdir wasm && curl -L $URLPERL | tar -xzf - --strip-components=1 --directory=wasm
          cp hintfile_wasm.sh wasm/hints/emscripten.sh
          
          cd wasm 
          emconfigure bash ./Configure -sde -Dinc_version_list=none -Ddlsrc=none -Dloclibpth='' -Dglibpth='' -Dlns='/bin/ln' -Dman1dir=none -Dman3dir=none -Dosname="emscripten" -Darchname="wasm" -Dosvers="2.0.5" -Dmyhostname='localhost' -Dmydomain='.local' -Dperladmin=root -Dcc=emcc -Dld=emcc -Dar=$(which emar) -Dranlib=$(which emranlib) -Doptimize="-O2" -Dlibs='-lm' -Dhintfile=emscripten -Dsysroot=$(dirname $(which emcc))/system -Dhostperl=$PWD/../native/miniperl -Dhostgenerate=$PWD/../native/generate_uudmap -Dprefix=$PWD/prefix -Dstatic_ext="mro Devel/Peek File/DosGlob File/Glob Sys/Syslog Sys/Hostname PerlIO/via PerlIO/mmap PerlIO/encoding B attributes Unicode/Normalize Unicode/Collate threads threads/shared IPC/SysV re Digest/MD5 Digest/SHA SDBM_File Math/BigInt/FastCalc Data/Dumper I18N/Langinfo Time/HiRes Time/Piece IO Socket Hash/Util/FieldHash Hash/Util Filter/Util/Call POSIX Encode/Unicode Encode Encode/JP Encode/KR Encode/EBCDIC Encode/CN Encode/Symbol Encode/Byte Encode/TW Compress/Raw/Zlib Compress/Raw/Bzip2 MIME/Base64 Cwd Storable List/Util Fcntl Opcode"
          
          ln -s $PWD/pod/perldelta.pod .; ln $PWD/README.* ..
          emmake make utilities PERL="$PWD/../native/miniperl"
          emmake make       RUN_PERL="$PWD/../native/miniperl -Ilib -I."
          chmod +x ./perl # export EMMAKEN_JUST_CONFIGURE=1 before emmake make
          emmake make install
          cp ./perl.wasm ./prefix/bin
          node ./prefix/bin/perl -e 'print("hello world\n");'

          emcc -o perlembed --embed-file prefix  -lm -O2 -s NO_EXIT_RUNTIME=1 -s ALLOW_MEMORY_GROWTH=1 -Wno-almost-asm -s ERROR_ON_UNDEFINED_SYMBOLS=0 -s WASM=1 -fstack-protector-strong  perlmain.o  lib/auto/mro/mro.a lib/auto/Devel/Peek/Peek.a lib/auto/File/DosGlob/DosGlob.a lib/auto/File/Glob/Glob.a lib/auto/Sys/Syslog/Syslog.a lib/auto/Sys/Hostname/Hostname.a lib/auto/PerlIO/via/via.a lib/auto/PerlIO/mmap/mmap.a lib/auto/PerlIO/encoding/encoding.a lib/auto/B/B.a lib/auto/attributes/attributes.a lib/auto/Unicode/Normalize/Normalize.a lib/auto/Unicode/Collate/Collate.a lib/auto/threads/threads.a lib/auto/threads/shared/shared.a lib/auto/IPC/SysV/SysV.a lib/auto/re/re.a lib/auto/Digest/MD5/MD5.a lib/auto/Digest/SHA/SHA.a lib/auto/SDBM_File/SDBM_File.a lib/auto/Math/BigInt/FastCalc/FastCalc.a lib/auto/Data/Dumper/Dumper.a lib/auto/I18N/Langinfo/Langinfo.a lib/auto/Time/HiRes/HiRes.a lib/auto/Time/Piece/Piece.a lib/auto/IO/IO.a lib/auto/Socket/Socket.a lib/auto/Hash/Util/FieldHash/FieldHash.a lib/auto/Hash/Util/Util.a lib/auto/Filter/Util/Call/Call.a lib/auto/POSIX/POSIX.a lib/auto/Encode/Unicode/Unicode.a lib/auto/Encode/Encode.a lib/auto/Encode/JP/JP.a lib/auto/Encode/KR/KR.a lib/auto/Encode/EBCDIC/EBCDIC.a lib/auto/Encode/CN/CN.a lib/auto/Encode/Symbol/Symbol.a lib/auto/Encode/Byte/Byte.a lib/auto/Encode/TW/TW.a lib/auto/Compress/Raw/Zlib/Zlib.a lib/auto/Compress/Raw/Bzip2/Bzip2.a lib/auto/MIME/Base64/Base64.a lib/auto/Cwd/Cwd.a lib/auto/Storable/Storable.a lib/auto/List/Util/Util.a lib/auto/Fcntl/Fcntl.a lib/auto/Opcode/Opcode.a lib/auto/Encode/Byte/Byte.a lib/auto/Encode/CN/CN.a lib/auto/Encode/EBCDIC/EBCDIC.a lib/auto/Encode/JP/JP.a lib/auto/Encode/KR/KR.a lib/auto/Encode/Symbol/Symbol.a lib/auto/Encode/TW/TW.a lib/auto/Encode/Unicode/Unicode.a libperl.a `cat ext.libs` -lm
          find ./prefix

      - name: Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: wasm/config.h
